version: "3"

services:
  mongo:
    container_name: mongo
    image: mongo:latest
    restart: always
    ports:
      - 127.0.0.1:${MONGODB_PORT:-27017}:${MONGODB_PORT:-27017}
    volumes:
      - ${MONGODB_PATH:-./mongodb}:/data/db
    networks:
      - internal

  chatgpt_telegram_bot:
    container_name: chatgpt_telegram_bot
    command: python3 bot/main.py
    restart: on-failure
    build:
      context: "."
      dockerfile: Dockerfile
    ports:
      - 8443:8443
    volumes:
      - ./:/code/
    depends_on:
      - mongo
    networks:
      - internal

  webhook:
    container_name: webhook
    command: bash -c "cd bot/ && gunicorn payment_webhook:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000"
    restart: always
    build:
      dockerfile: Dockerfile
    volumes:
      - .:/code/
    ports:
      - 8000:8000
    networks:
      - internal
    environment:
      - WATCHFILES_FORCE_POLLING=true

  admin:
    container_name: admin
    command: bash -c "cd admin/ && uvicorn main:app --host 0.0.0.0 --port 8080 --reload"
#    command: bash -c "cd admin/ && gunicorn main:app --workers 1 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8080"
#    command: bash -c "cd  djangoadmin/botadmin/ && python manage.py runserver 0.0.0.0:8080"
    restart: always
    build:
      dockerfile: Dockerfile
    volumes:
      - ./:/code
    ports:
      - 8080:8080
    networks:
      - internal

  mongo_express:
    container_name: mongo-express
    image: mongo-express:latest
    restart: always
    ports:
      - 127.0.0.1:${MONGO_EXPRESS_PORT:-8081}:${MONGO_EXPRESS_PORT:-8081}
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=${MONGODB_PORT:-27017}
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=chatgpt_telegram_bot
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME:-username}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD:-password}
    depends_on:
      - mongo
    networks:
      - internal

#  nginx:
#    container_name: nginx
#    build: ./nginx
#    restart: always
#    ports:
#      - 80:80
#      - 443:443
#    volumes:
#      - ./certbot/www:/var/www/certbot/
#      - ./certbot/conf/:/etc/nginx/ssl/
#    depends_on:
#      - chatgpt_telegram_bot
#      - webhook
#    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
#    networks:
#      - internal
#
#  certbot:
#    container_name: certbot
#    image: certbot/certbot:latest
#    restart: unless-stopped
#    volumes:
#      - ./certbot/www/:/var/www/certbot/
#      - ./certbot/conf/:/etc/letsencrypt/
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
#    networks:
#      - internal

networks:
  internal:
